Consider the LinkedIn solution that allows people to connect on a social media platform for employment purposes. Every user on LinkedIn can establish one or more connections with other users on the same platform. In addition to the connections, assume that LinkedIn also tracks and saves the employer company of each user.

Write a function that allows a user to discover the closest company to him/her. The function targets a specific input user and prints the closest company to the user based on his/her connections other than his/her company. The closest is defined by having the highest number of connections from 1st and 2nd-degree connections. For instance, for Amer from Tamatem, 1st degree has STS(1) and 2nd degree STS(1) and Roya(1), so accordingly, STS is the answer with a total of 2 connections.

Input

N for the number of users,
C for the number of connections between these users
An array for the names of the users with names[0] as the name of the first user and so on.
An array for the companies with companies[0] as the company of the first user and so on.
An array of integers for the From values of the connections, assuming 0-based arrays
An array of integers for the To values of the connections, assuming 0-based arrays
A user name as a string

Output

Your function should print the closest company for the given user name
In case of having two or more companies have the same level of closeness, print all of them in ascending order, one line each.
In case the user is not connected with anyone, print the result "Not Connected".

Note:

The program will be automatically tested by calling your Closest(int N, int C, string names[], string companies[],int from[], int to[], string name) function. You are not allowed to change the signature of this function but you can expand your file and functions/classes as needed. Assume that unique names are used such as email addresses.

Example 1:
Input:

N= 10
C= 12

From and To Arrays
0 1
0 4
0 6
0 9
1 2
2 4
2 5
3 7
4 7
4 8
6 9
7 8

Names:

Ahmad
Omar
Sara
Ali
Khaled
Mohammad
Amer
Sultan
Firas
Rula

Companies:
Tamatem
STS
PSUT
STS
Roya
PSUT
Tamatem
Roya
PSUT
STS

Name: Amer

answer:
STS 

Code:
#include <iostream>
using namespace std;
#include <string>
#include <climits>
#include <list>
#include <algorithm>
#include <vector>
#include <queue>
#include <map>

class Edge {
public:
    int from;
    int to;
    Edge(int from,int to) {
        this->from = from;
        this->to = to;
    }
};

class Graph { 
public:
	int V;            
	list<Edge> *adj;  
    string *company;
	Graph(int V) { 
        this->V = V;
        adj = new list<Edge>[V];
        company=new string [V];
    }
	~Graph() { delete [] adj; delete [] company; }

    void add_edge(int v, int w) { 
       
        adj[v].push_back(Edge(v, w)); 
        adj[w].push_back(Edge(w, v));
    }

    bool has_edge(int v, int w) const {
        for (Edge edge : adj[v])
            if (edge.to == w)
                return true;
        return false;
    }
    bool is_connected (int source ){
        int sum=0;
        for(Edge i:adj[source]){
            if(company[i.to]!=company[source])
            sum=+1;
        }
        return sum!=0;
    }
    void print() const {
        for (int v = 0; v < V; v++) {
            cout << "[" << v << "]  "<<" company:" <<company;// shouldnt we specify which vertex
            for (Edge edge : adj[v])
                cout << edge.to << ", ";
            cout << endl;
        }
    }	

   vector<string> BFT(int source,map<string,int> freq){	
	bool* marked = new bool[V];
	int* parent  = new int[V];
	int* dist    = new int[V]; //distance

        int maxFreq = -1;
        vector<string> compMax;
 
	for (int u = 0; u < V; u++){
		marked[u] = false;  
		parent[u] = -1;
		dist[u]   = INT_MAX;
	}

	marked[source] = true; 
	dist[source]   = 0;

	queue<int> q; 
	q.push(source);
 
while(!q.empty()){
		int v = q.front();
		q.pop(); 

		for (Edge w : adj[v]) {
			if (!marked[w.to]){
				marked[w.to] = true;
                if (freq.find(company[w.to]) != freq.end()) {
                        freq[company[w.to]]++;
                    } else {
                        freq.insert(make_pair(company[w.to],1));
                    }
				dist[w.to]   = dist[v] + 1;
				parent[w.to] = v;
                if(dist[v]<1)
				q.push(w.to);
			}
		};
	}
	// The above loop repeats at most
	// deg(0) + deg(1) deg(2) + ... + deg(V-1)
	// = E times.

        for (auto i : freq) {
            if (i.second > maxFreq)
                maxFreq = i.second;
        }
        if (maxFreq!=-1)
            for (auto i : freq) {
                if (i.second == maxFreq&& i.first!=company[source])
                    compMax.push_back(i.first);
            }
 
	delete [] marked;
	delete [] parent;
	delete [] dist;
     return compMax;
    } 
};

void Closest(int n, int c, string names[], string companies_arr[], int edge1[], int edge2[], string name) {
Graph linkedin(n);

for( int i=0 ;i<n;i++){
  linkedin.company[i] =companies_arr[i];
    }

int index;
for(int i=0; i<n;i++ )
 if(name==names[i])index= i;


for( int i=0;i<c;i++){
    linkedin.add_edge(edge1[i],edge2[i]);
}
 
map<string,int> freq ;
if(linkedin.is_connected(index)==0 )
           cout<< "Not Connected";
vector<string> ans=linkedin.BFT(index,freq);
sort(ans.begin(), ans.end());
for(string i :ans){
    cout<<i;
}
}
